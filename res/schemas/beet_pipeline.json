{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Beet project config",
  "type": "object",
  "properties": {
    "name": {
      "description": "Project name",
      "type": "string"
    },
    "description": {
      "description": "Project description. Included in pack.mcmeta",
      "type": "string"
    },
    "author": {
      "description": "Project author. Included in pack.mcmeta",
      "type": "string"
    },
    "version": {
      "description": "Project version. Included in pack.mcmeta",
      "type": "string"
    },

    "directory": {
      "description": "Root directory of the project",
      "type": "string"
    },
    "extend": {
      "description": "List of project config files to inherit from",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "output": {
      "description": "Output directory",
      "directory": "Generated files will be put here",
      "type": "string"
    },
    "ignore": {
      "description": "List of paths whose modification should be ignored by the watch command",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "whitelist": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "require": {
      "description": "List of plugins running before the bootstrap plugin",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "templates": {
      "description": "List of directories containing rendering templates",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "data_pack": {
      "description": "Datapack config",
      "$ref": "#/definitions/pack_config"
    },
    "resource_pack": {
      "description": "Resourcepack config",
      "$ref": "#/definitions/pack_config"
    },
    "pipeline": {
      "description": "The plugin pipeline",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "anyOf": [
          {
            "const": "beet.contrib.babelbox",
            "description": "Loads translations from csv files (minimal built-in implementation)"
          },
          {
            "const": "beet.contrib.dundervar",
            "description": "Jinja extension for turning '__foo__' into '{{ foo }}'"
          },
          {
            "const": "beet.contrib.format_json",
            "description": "Format json files"
          },
          {
            "const": "beet.contrib.function_header",
            "description": "Automatically adds a header to functions"
          },
          {
            "const": "beet.contrib.hangman",
            "description": "Indentation-based syntactic extensions for functions"
          },
          {
            "const": "beet.contrib.inline_function",
            "description": "Jinja extension for declaring functions inline"
          },
          {
            "const": "beet.contrib.inline_function_tag",
            "description": "Jinja extension for declaring function tags inline"
          },
          {
            "const": "beet.contrib.lantern_load",
            "description": "Adds Lantern Load runtime dependencies"
          },
          {
            "const": "beet.contrib.mcbuild",
            "description": "Builds a MC-Build project"
          },
          {
            "const": "beet.contrib.minify_function",
            "description": "Minifies function files"
          },
          {
            "const": "beet.contrib.minify_json",
            "description": "Minifies json files"
          },
          {
            "const": "beet.contrib.relative_function_path",
            "description": "Resolves relative function paths within a namespace"
          },
          {
            "const": "beet.contrib.render",
            "description": "Invokes the built-in template renderer"
          },
          {
            "const": "beet.contrib.sandstone",
            "description": "Builds a sandstone project"
          },
          {
            "const": "beet.contrib.scoreboard",
            "description": "Adds generated scoreboards to the data pack"
          },
          {
            "const": "beet.contrib.template_context",
            "description": "Exposes the beet context in templates"
          },
          {
            "const": "beet.contrib.yellow_shulker_box",
            "description": "Includes the yellow shulker box loot table"
          },
          {
            "const": "babelbox.integration.beet",
            "description": "Loads translations from csv files (Full-featured implementation, requires https://pypi.org/project/babelbox/)"
          },
          {
            "const": "mcanitexgen.integration.beet",
            "description": "Generates .mcmeta files for animated textures"
          },
          {
            "type": "string",
            "description": "Custom plugin"
          },
          {
            "description": "Nested beet project configuration",
            "$ref": "#"
          }
        ]
      }
    },
    "meta": {
      "description": "Storage for during the build process. Also contains plugin config",
      "type": "object",
      "properties": {
        "generate_format": {
          "description": "Default location of generated files",
          "type": "string"
        },
        "generate_namespace": {
          "description": "Default namespace of generated files",
          "type": "string"
        },
        "generate_prefix": {
          "description": "Default prefix of generated files",
          "type": "string"
        },
        "generate_scoreboard": {
          "description": "Scoreboards objectives to generate",
          "type": "object",
          "patternProperties": {
            ".*": {
              "description": "Objective name and its criteria",
              "$ref": "minecraft/scoreboard_criteria.json"
            }
          }
        },
        "babelbox": {
          "description": "babelbox plugin settings",
          "$ref": "plugins/babelbox.json"
        },
        "format_json": {
          "description": "format_json plugin settings",
          "$ref": "contrib/format_json.json"
        },
        "function_header": {
          "description": "function_header plugin settings",
          "$ref": "contrib/function_header.json"
        },
        "hangman": {
          "description": "hangman plugin settings",
          "$ref": "contrib/hangman.json"
        },
        "lantern_load": {
          "description": "lantern_load plugin settings",
          "$ref": "contrib/lantern_load.json"
        },
        "mcbuild": {
          "description": "mcbuild plugin settings",
          "$ref": "contrib/mcbuild.json"
        },
        "render": {
          "description": "render plugin settings",
          "$ref": "contrib/render.json"
        },
        "sandstone": {
          "description": "sandstone plugin settings",
          "$ref": "contrib/sandstone.json"
        },
        "scoreboard": {
          "description": "scoreboard plugin settings",
          "$ref": "contrib/scoreboard.json"
        },
        "mcanitexgen": {
          "description": "mcanitexgen plugin settings",
          "$ref": "plugins/mcanitexgen.json"
        }
      }
    }
  },
  "definitions": {
    "pack_config": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the pack. Overwrites project name",
          "type": "string"
        },
        "description": {
          "description": "Description of the pack. Overwrites project description",
          "type": "string"
        },
        "pack_format": {
          "description": "Pack version",
          "default": 6,
          "type": "integer",
          "minimum": 0
        },
        "zipped": {
          "description": "Whether the pack should be zipped",
          "type": "boolean"
        },
        "load": {
          "description": "Load and merge existing packs",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "render": {
          "description": "Groups of files that will be processed with templates",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
